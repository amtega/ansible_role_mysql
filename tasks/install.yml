---

- name: Install mysql
  block:
    - name: Setup mysql community repository
      when: >-
        ansible_local.artifact_mysql_repo.rpm is undefined
        or ansible_local.artifact_mysql_repo.rpm != mysql_repo_package_file
      block:
        - name: Download mysql community repository package
          ansible.builtin.include_role:
            name: amtega.artifact
          vars:
            artifact_overrides:
              id: mysql_repo
              state: present
            artifact: "{{ mysql_repo_artifact | combine(artifact_overrides) }}"

        - name: Install mysql community repository package
          ansible.builtin.yum:
            name: "{{ artifact_result['mysql_repo'].download_path }}"
            state: present
            disable_gpg_check: yes
          when: artifact_result['mysql_repo'].changed

        - name: Remove mysql community repository package
          ansible.builtin.include_role:
            name: amtega.artifact
          vars:
            artifact_overrides:
              id: mysql_repo
              state: absent
              absent_local_facts:
                rpm: "{{ mysql_repo_package_file }}"
            artifact: "{{ mysql_repo_artifact | combine(artifact_overrides) }}"

    - name: Disable all mysql releases repositories
      ansible.builtin.replace:
        path: "{{ mysql_repo_file_path }}"
        regexp: "enabled *= *1"
        replace: "enabled=0"

    - name: Disable package manager mysql module
      ansible.builtin.command: yum -y module disable mysql
      args:
        warn: no
      when: ansible_facts.distribution_major_version is version("7", ">")
      register: mysql_disable_module_result
      changed_when: >-
        mysql_disable_module_result.stdout is not search("Nothing to do")
      environment:
        LANG: en_US

    - name: Install selected mysql version
      ansible.builtin.yum:
        name: "{{ package }}"
        state: present
        enablerepo: "mysql{{ mysql_release }}-community"
        disable_gpg_check: "{{ mysql_disable_gpg_check | bool }}"
      loop: "{{ mysql_packages }}"
      loop_control:
        loop_var: package

    - name: Start mysql service with defaults
      ansible.builtin.service:
        name: mysqld
        state: started
        enabled: yes

    - name: Setup extra directories
      ansible.builtin.file:
        path: "{{ mysql_extra_dir }}"
        state: directory
        owner: "{{ mysql_user }}"
        group: "{{ mysql_group }}"
        mode: "0755"
        seuser: system_u
        serole: object_r
        setype: mysqld_db_t
        selevel: s0
      loop:
        - "{{ mysql_innodb_temp_dir }}"
        - "{{ mysql_binlog_dir }}"
      loop_control:
        loop_var: mysql_extra_dir

    - name: Setup log directory
      ansible.builtin.file:
        path: "{{ mysql_log_dir }}"
        state: directory
        owner: "{{ mysql_user }}"
        group: "{{ mysql_group }}"
        mode: "0755"
        seuser: system_u
        serole: object_r
        setype: mysqld_log_t
        selevel: s0

    - name: Setup mysql configuration file
      ansible.builtin.template:
        src: my.cnf.j2
        dest: "{{ mysql_config_file_path }}"
        mode: "0644"
      register: mysql_setup_my_cnf_result

    - include_tasks: limits.yml
      when:
        - mysql_setup_my_cnf_result is changed
        - mysql_adjust_limits

    - name: Restart mysql service to apply settings
      ansible.builtin.service:
        name: mysqld
        state: restarted
        enabled: yes
      when: mysql_setup_my_cnf_result is changed
  environment: "{{ proxy_client_environment }}"
