---
# Role configuration tasks

- name: Check install log file
  ansible.builtin.stat:
    path: "{{ mysql_install_log_path }}"
  register: check_install_log_result

- name: Gather temporary password
  ansible.builtin.shell: >-
    set -o pipefail ; \
    grep 'temporary password' \
    {{ mysql_install_log_path }} \
    | awk '{ print $NF }'
  args:
    warn: no
  when: check_install_log_result.stat.exists
  changed_when: no
  register: mysql_gather_password_result
  no_log: "{{ mysql_no_log | default(true) }}"

- name: Set new password
  ansible.builtin.expect:
    ansible.builtin.command: >-
      mysql -e
      "
      ALTER USER 'root'@'localhost'
      IDENTIFIED WITH mysql_native_password
      BY '{{ mysql_root_password }}';
      "
      --connect-expired-password
      -uroot
      -p
    responses:
      "Enter password": "{{ mysql_gather_password_result.stdout }}"
  when:
    - mysql_gather_password_result is not skipped
    - mysql_gather_password_result.stdout | length > 0
  no_log: "{{ mysql_no_log | default(true) }}"
  environment:
    LANG: en_US

- name: Remove install log
  ansible.builtin.file:
    path: "{{ mysql_install_log_path }}"
    state: absent
  when:
    - mysql_log_error is defined
    - mysql_log_error != mysql_install_log_path

- name: Setup root user autologin
  ansible.builtin.expect:
    ansible.builtin.command: >-
      mysql_config_editor set --user="{{ mysql_root_user }}" --password
    responses:
      "Enter password": "{{ mysql_root_password }}"
    creates: "{{ mysql_user_autologin_file }}"
  when: mysql_create_user_autologin
  no_log: "{{ mysql_no_log | default(true) }}"

- name: Setup logrotate
  ansible.builtin.template:
    src: logrotate.j2
    dest: "{{ mysql_logrotate_config_path }}"
    mode: "0644"
  when:
    - mysql_logrotate_config_path | default("") | length > 0
    - mysql_logrotate_config | default("") | length > 0

- name: Secure root accounts
  mysql_user:
    login_user: "{{ mysql_root_user }}"
    login_password: "{{ mysql_root_password }}"
    user: "{{ mysql_root_user }}"
    password: "{{ mysql_root_password }}"
    host: "{{ mysql_host_allowed }}"
  loop: "{{ mysql_root_allowed_hosts }}"
  loop_control:
    loop_var: mysql_host_allowed
  no_log: "{{ mysql_no_log | default(true) }}"

- name: Delete all anonymous users
  mysql_user:
    login_user: "{{ mysql_root_user }}"
    login_password: "{{ mysql_root_password }}"
    user: ""
    host_all: yes
    state: absent
  no_log: "{{ mysql_no_log | default(true) }}"

- name: Setup backup user
  mysql_user:
    login_user: "{{ mysql_root_user }}"
    login_password: "{{ mysql_root_password }}"
    user: "{{ mysql_backup_user }}"
    password: >-
      {{ (mysql_encrypted_password | bool)
         | ternary(mysql_backup_encrypted_password_result.stdout | default(""),
                   mysql_backup_password | default("")) }}
    encrypted: "{{ mysql_encrypted_password }}"
    priv: "{{ lookup('template', 'privileges.yml.j2') }}"
  when: mysql_backup_user is defined
  no_log: "{{ mysql_no_log | default(true) }}"
  vars:
    mysql_privileges_dict: "{{ mysql_backup_privileges }}"

- name: Remove test database
  mysql_db:
    login_user: "{{ mysql_root_user }}"
    login_password: "{{ mysql_root_password }}"
    name: test
    state: absent